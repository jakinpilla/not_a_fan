This is my dev dairy to know when I do development...

- 190628...
* What is middleware...

* jsonwebtoken

 -  var jwt = require('jsonwebtoken');
    const key = "베리베리어려운키"
    var token = jwt.sign({ id: 'jakin', email: 'jakin@xxx.com' }, key);
    console.log(token)

    var decoded = jwt.verify(token, key) //, (err, r) => {
    //   if (err) return console.log(err)
    // });
    console.log(decoded)
    console.log(new Date(decoded.iat * 10000))

* Callback and Promise pattern...

[Callback pattern]
-   User.findOne({}, (err, r) => {
    if (err) return console.error(err)
    console.log(r)
})

[Callback pattern]
-   User.findOne({ nameL 'aaa'}, (err, u) => {
    if (err) return console.error(err.message)
    if (!u) {
        console.log(u) // null
        User.create({ name: 'aaa', age: 10 }, (err, cu) => {
            if (err) return console.error(err.message)
            console.log(cu)
            jwt.sign({ name: cu.name, age: cu.age}, key, (err, token) => {
                if (err) return console.error(err.message)
                console.log(token)
                jwt.verify(token, key, (err, v) => {
                    if (err) return console.error(err.message)
                    console.log(v)
                })
            })
        })
    }
    else {
        console.log(u) 
        const user = u
        User.updateOne( {_id: u._id}, {$inc: {age: 1}}, (err, ur) => {
            if (err) return console.error(err.message)
            console.log(ur)
            jwt.sign({ name: user.name, age: user.age + 1}, key, (err, token) => {
                if (err) return console.error(err.message)
                console.log(token, key, (err, v) => {
                    if (err) return console.error(err.message)
                    console.log(v)
                })
            })
        })
    } 
})

-   foo(1, (err, r) => {
    if (err) return console.error(err.message)
    console.log(r)
})

[Callback pattern]
-   const foo = (v, cb) => {
    if (v > 1) return cb(new Error('abcd'))
    setTimeout(() => {
        cb(null, v+1)    
    }, 3000)   
}

-   foo(1, (err, r) => {
    if (err) return console.error(err.message)
    console.log(r)
})

[Promise pattern]
-   User.findOne({})
    .then(r => console.log(r))
    .catch(err => console.error(err))

[Promise pattern, Promise chain]
    let user
    User.findOne({ name: 'aaa' })
    .then((u) => {
        if (!u) return User.create({ name: 'aaa', age: 10 })
        return Promise.resolve(u)
    })
    .then((u) => {
        user = u
        return User.updateOne({ _id: u._id}, { $inc: { age: 1 }})
    })
    then((r) => {
        if (!r.nModified) throw new Error('수정된 것이 없네요...')
        user.age++
        return signToken(user, key)
    })
    .then((token) => {
        return verifyToken(token, key)
    })
    .then(v => console.log(v))
    .catch((err) => {
        console.error(err.message)
    })


[async pattern]
const getToken = async (name) => {
    let u = await User.findOne({ name })
    if (!u) u = await User.create({ name, age: 10 })
    if (u.age > 12) throw new Error(`${u.age}는 나이가 너무 많습니다.`)
    const ur = await User.uddateOne({ _id: u._id }, { $inc: { age: 1 }})
    if (!ur.nModified) throw new Error('수정된 것이 없네요..')
    u = await User.findOne({ _id: u._id })
    const token = await signToken(u, key)
    const v = await verifyToken(token, key)
    return v
}

getToken('aaa')
    .then(v => console.log(v))
    .catch(err => console.error(err.message))

